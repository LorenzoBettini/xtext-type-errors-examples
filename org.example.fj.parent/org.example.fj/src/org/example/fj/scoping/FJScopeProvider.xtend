/*
 * generated by Xtext 2.13.0
 */
package org.example.fj.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.example.fj.fj.FJMemberSelection
import com.google.inject.Inject
import org.example.fj.typing.FJTypeSystem
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xsemantics.runtime.RuleEnvironment
import org.eclipse.xtext.EcoreUtil2
import org.example.fj.fj.FJClass
import org.eclipse.xtext.scoping.IScope

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class FJScopeProvider extends AbstractFJScopeProvider {

	@Inject FJTypeSystem typeSystem

	override getScope(EObject context, EReference reference) {
		switch (context) {
			FJMemberSelection: {
				val receiverType =
					typeSystem.inferType
						(environmentForThis(context), context.receiver).value
				if (receiverType !== null)
					Scopes.scopeFor(
						typeSystem.fields(receiverType) +
						typeSystem.methods(receiverType)
					)
				else
					IScope.NULLSCOPE
			}
			default: super.getScope(context, reference)
		}
	}

	def private environmentForThis(EObject context) {
		val env = new RuleEnvironment
		val containingClass = EcoreUtil2.getContainerOfType(context,
				FJClass)
		if (containingClass !== null)
			env.add("this", containingClass)
		return env
	}
}
