/*
 * generated by Xtext 2.13.0
 */
package org.example.fj.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.example.fj.fj.FJMemberSelection
import com.google.inject.Inject
import org.example.fj.typing.FJTypeSystem
import org.eclipse.xtext.scoping.Scopes

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class FJScopeProvider extends AbstractFJScopeProvider {

	@Inject FJTypeSystem typeSystem

	override getScope(EObject context, EReference reference) {
		switch (context) {
			FJMemberSelection: {
				// TODO: environment for this
				val receiverType = typeSystem.inferType(context.receiver).value
				Scopes.scopeFor(
					typeSystem.fields(receiverType) +
					typeSystem.methods(receiverType)
				)
			}
			default: super.getScope(context, reference)
		}
	}
	
}
