/*
 * generated by Xtext 2.13.0
 */
package org.example.fj.tests

import com.google.inject.Inject
import java.util.List
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.example.fj.fj.FJClass
import org.example.fj.fj.FJMember
import org.example.fj.fj.FJProgram
import org.example.fj.typing.FJTypeSystem
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*

@RunWith(XtextRunner)
@InjectWith(FJInjectorProvider)
class FJTypeSystemTest {
	@Inject
	ParseHelper<FJProgram> parseHelper

	@Inject
	FJTypeSystem typeSystem
	
	@Test
	def void testSuperclasses() {
		val result = parseHelper.parse('''
			class Object {}
			class A extends Object {}
			class B extends A {}
		''')
		assertClasses(
			typeSystem.superclasses(result.classes.last),
			"A, Object"
		)
	}

	@Test
	def void testFields() {
		val result = parseHelper.parse('''
			class Object {}
			class A extends Object {
				public Object Afield;
			}
			class B extends A {
				public Object Bfield;
			}
		''')
		assertMembers(
			typeSystem.fields(result.classes.last),
			"Afield, Bfield"
		)
	}

	@Test
	def void testMethods() {
		val result = parseHelper.parse('''
			class Object {}
			class A extends Object {
				public Object Amethod() { return new Object(); }
			}
			class B extends A {
				public Object Bmethod() { return new Object(); }
			}
		''')
		assertMembers(
			typeSystem.methods(result.classes.last),
			"Bmethod, Amethod"
		)
	}

	def private assertClasses(List<FJClass> classes, CharSequence expectedRepr) {
		assertEquals(
			expectedRepr.toString,
			classes.map[name].join(", ")
		)
	}

	def private assertMembers(List<? extends FJMember> members, CharSequence expectedRepr) {
		assertEquals(
			expectedRepr.toString,
			members.map[name].join(", ")
		)
	}
}
