/*
 * generated by Xtext 2.13.0
 */
package org.example.fj.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.example.fj.fj.FJProgram
import org.junit.Test
import org.junit.runner.RunWith
import static org.example.fj.fj.FjPackage.Literals.*

@RunWith(XtextRunner)
@InjectWith(FJInjectorProvider)
class FJValidatorTest {
	@Inject extension
	ParseHelper<FJProgram> parseHelper

	@Inject extension
	ValidationTestHelper
	
	@Test
	def void testValidCast() {
		val result = '''
			class A {}
			class B extends A {}
			(A) new B()
		'''.parse
		result.assertNoErrors
	}

	@Test
	def void testValidMethodBody() {
		val result = '''
			class A {}
			class B extends A {
				A m() {
					return new B();
				}
			}
		'''.parse
		result.assertNoErrors
	}

	@Test
	def void testNotValidMethodBody() {
		val result = '''
			class A {}
			class B extends A {
				B m() {
					return new A();
				}
			}
		'''.parse
		result.assertError(
			FJ_NEW,
			null,
			"Type mismatch: cannot convert from A to B"
		)
	}

	@Test
	def void testNotValidMethodInvocation() {
		val result = '''
			class Object {}
			class A {
				public Object f;
				public Object m() {
					return new Object();
				}
			}
			
			new A(new Object()).f()
		'''.parse
		result.assertError(
			FJ_MEMBER_SELECTION,
			null,
			"Method invocation on a field"
		)
	}

	@Test
	def void testNotValidFieldSelection() {
		val result = '''
			class Object {}
			class A {
				public Object f;
				public Object m() {
					return new Object();
				}
			}
			
			new A(new Object()).m
		'''.parse
		result.assertError(
			FJ_MEMBER_SELECTION,
			null,
			"Field selection on a method"
		)
	}
}
